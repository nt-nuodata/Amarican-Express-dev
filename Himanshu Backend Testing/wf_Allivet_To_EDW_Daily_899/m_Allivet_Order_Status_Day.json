{"Edges":[{"id":"e-0","source":"Shortcut_to_ALLIVET_ORDER_STATUS_DAY1","target":"SQ_Shortcut_to_ALLIVET_ORDER_STATUS_DAY","transformationType":"Source Qualifier"},{"id":"e-1","source":"Shortcut_to_ALLIVET_ORDER_DAY","target":"SQ_Shortcut_to_ALLIVET_ORDER_DAY","transformationType":"Source Qualifier"},{"id":"e-2","source":"Shortcut_to_ALLIVET_INVOICE_DAY","target":"SQ_Shortcut_to_ALLIVET_INVOICE_DAY","transformationType":"Source Qualifier"},{"id":"e-3","source":"Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY","target":"SQ_Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY","transformationType":"Source Qualifier"},{"id":"e-4","source":"SQ_Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY","target":"JNRTRANS","transformationType":"Joiner"},{"id":"e-5","source":"SQ_Shortcut_to_ALLIVET_ORDER_DAY","target":"JNRTRANS","transformationType":"Joiner"},{"id":"e-6","source":"JNRTRANS","target":"EXPTRANS1","transformationType":"Expression"},{"id":"e-7","source":"EXPTRANS1","target":"JNRTRANS1","transformationType":"Joiner"},{"id":"e-8","source":"SQ_Shortcut_to_ALLIVET_INVOICE_DAY","target":"JNRTRANS1","transformationType":"Joiner"},{"id":"e-9","source":"JNRTRANS1","target":"Exp_Dates","transformationType":"Expression"},{"id":"e-10","source":"Exp_Dates","target":"Srt_CHG_DT","transformationType":"Sorter"},{"id":"e-11","source":"Srt_CHG_DT","target":"Agg_Order_OrderLN","transformationType":"Aggregator"},{"id":"e-12","source":"SQ_Shortcut_to_ALLIVET_ORDER_STATUS_DAY","target":"Jnr_Order_Status","transformationType":"Joiner"},{"id":"e-13","source":"Agg_Order_OrderLN","target":"Jnr_Order_Status","transformationType":"Joiner"},{"id":"e-14","source":"Jnr_Order_Status","target":"Exp_Update_Flag","transformationType":"Expression"},{"id":"e-15","source":"Exp_Update_Flag","target":"Ftr_Insert_Update","transformationType":"Filter"},{"id":"e-16","source":"Ftr_Insert_Update","target":"EXPTRANS","transformationType":"Expression"},{"id":"e-17","source":"EXPTRANS","target":"UPDTRANS","transformationType":"Update Strategy"},{"id":"e-18","source":"UPDTRANS","target":"Shortcut_to_ALLIVET_ORDER_STATUS_DAY","transformationType":"Target Definition"}],"Nodes":[{"data":{"transformationType":"Source Definition","label":"Shortcut_to_ALLIVET_ORDER_STATUS_DAY1","queries":["df_0 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR_V2_test AS ALLIVET_ORDER_NBR,\n  RX_HOLD_DT_V2_test AS RX_HOLD_DT,\n  OPEN_DT_V2_test AS OPEN_DT,\n  COMPLETE_DT AS COMPLETE_DT,\n  VOID_DT_V2_test AS VOID_DT,\n  UPDATE_TSTMP AS UPDATE_TSTMP,\n  LOAD_TSTMP AS LOAD_TSTMP\nFROM\n  ALLIVET_ORDER_STATUS_DAY_V2_test\"\"\")","df_0.createOrReplaceTempView(\"Shortcut_to_ALLIVET_ORDER_STATUS_DAY1_0\")"]},"id":"Shortcut_to_ALLIVET_ORDER_STATUS_DAY1","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_ALLIVET_ORDER_STATUS_DAY","queries":["df_1 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  RX_HOLD_DT AS RX_HOLD_DT,\n  OPEN_DT AS OPEN_DT,\n  COMPLETE_DT AS COMPLETE_DT,\n  VOID_DT AS VOID_DT,\n  UPDATE_TSTMP AS UPDATE_TSTMP,\n  LOAD_TSTMP AS LOAD_TSTMP,\n  monotonically_increasing_id() AS Monotonically_Increasing_Id\nFROM\n  Shortcut_to_ALLIVET_ORDER_STATUS_DAY1_0\"\"\")","df_1.createOrReplaceTempView(\"SQ_Shortcut_to_ALLIVET_ORDER_STATUS_DAY_1\")"]},"id":"SQ_Shortcut_to_ALLIVET_ORDER_STATUS_DAY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"Shortcut_to_ALLIVET_ORDER_DAY","queries":["df_2 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR_V2_test AS ALLIVET_ORDER_NBR,\n  ALLIVET_ORDER_LN_NBR_V2_test AS ALLIVET_ORDER_LN_NBR,\n  ALLIVET_ORDER_DT AS ALLIVET_ORDER_DT,\n  PETSMART_ORDER_DT AS PETSMART_ORDER_DT,\n  ORDER_STATUS AS ORDER_STATUS,\n  PRODUCT_ID AS PRODUCT_ID,\n  PETSMART_ORDER_NBR AS PETSMART_ORDER_NBR,\n  PETSMART_SKU_NBR AS PETSMART_SKU_NBR,\n  ALLIVET_SKU_NBR AS ALLIVET_SKU_NBR,\n  SUB_TOTAL_AMT AS SUB_TOTAL_AMT,\n  FREIGHT_COST AS FREIGHT_COST,\n  TOTAL_AMT AS TOTAL_AMT,\n  SHIP_METHOD_CD AS SHIP_METHOD_CD,\n  ORDER_VOIDED_FLAG AS ORDER_VOIDED_FLAG,\n  ORDER_ONHOLD_FLAG AS ORDER_ONHOLD_FLAG,\n  ORDER_CREATED_DT AS ORDER_CREATED_DT,\n  ORDER_MODIFIED_DT AS ORDER_MODIFIED_DT,\n  SHIPPED_DT AS SHIPPED_DT,\n  ORDER_SHIPPED_FLAG AS ORDER_SHIPPED_FLAG,\n  INTERNAL_NOTES AS INTERNAL_NOTES,\n  PUBLIC_NOTES AS PUBLIC_NOTES,\n  AUTOSHIP_DISCOUNT_AMT AS AUTOSHIP_DISCOUNT_AMT,\n  ORDER_MERCHANT_NOTES AS ORDER_MERCHANT_NOTES,\n  RISKORDER_FLAG AS RISKORDER_FLAG,\n  RISK_REASON AS RISK_REASON,\n  ORIG_SHIP_METHOD_CD AS ORIG_SHIP_METHOD_CD,\n  SHIP_HOLD_FLAG AS SHIP_HOLD_FLAG,\n  SHIP_HOLD_DT AS SHIP_HOLD_DT,\n  SHIP_RELEASE_DT AS SHIP_RELEASE_DT,\n  ORDER_QTY AS ORDER_QTY,\n  ITEM_DESC AS ITEM_DESC,\n  EXT_PRICE AS EXT_PRICE,\n  ORDER_DETAIL_CREATED_DT AS ORDER_DETAIL_CREATED_DT,\n  ORDER_DETAIL_MODIFIED_DT AS ORDER_DETAIL_MODIFIED_DT,\n  HOW_TO_GET_RX AS HOW_TO_GET_RX,\n  VET_CD AS VET_CD,\n  PET_CD AS PET_CD,\n  ORDER_DETAIL_ONHOLD_FLAG AS ORDER_DETAIL_ONHOLD_FLAG,\n  ONHOLD_TO_FILL_FLAG AS ONHOLD_TO_FILL_FLAG,\n  UPDATE_TSTMP AS UPDATE_TSTMP,\n  LOAD_TSTMP AS LOAD_TSTMP\nFROM\n  ALLIVET_ORDER_DAY_V2_test\"\"\")","df_2.createOrReplaceTempView(\"Shortcut_to_ALLIVET_ORDER_DAY_2\")"]},"id":"Shortcut_to_ALLIVET_ORDER_DAY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_ALLIVET_ORDER_DAY","queries":["df_3 = spark.sql(\"\"\"SELECT\n  DISTINCT ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  ALLIVET_ORDER_DT AS ALLIVET_ORDER_DT,\n  monotonically_increasing_id() AS Monotonically_Increasing_Id\nFROM\n  Shortcut_to_ALLIVET_ORDER_DAY_2\nWHERE\n  (\n    UPDATE_TSTMP >= current_date\n    OR LOAD_TSTMP >= current_date\n  )\"\"\")","df_3.createOrReplaceTempView(\"SQ_Shortcut_to_ALLIVET_ORDER_DAY_3\")"]},"id":"SQ_Shortcut_to_ALLIVET_ORDER_DAY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"Shortcut_to_ALLIVET_INVOICE_DAY","queries":["df_4 = spark.sql(\"\"\"SELECT\n  INVOICE_POSTING_DT AS INVOICE_POSTING_DT,\n  INVOICE_CD AS INVOICE_CD,\n  TXN_TYPE AS TXN_TYPE,\n  ALLIVET_ORDER_NBR_V2_test AS ALLIVET_ORDER_NBR,\n  ALLIVET_SKU_NBR AS ALLIVET_SKU_NBR,\n  PRODUCT_ID AS PRODUCT_ID,\n  PETSMART_ORDER_NBR AS PETSMART_ORDER_NBR,\n  PETSMART_SKU_NBR AS PETSMART_SKU_NBR,\n  UPC_ID AS UPC_ID,\n  SOLD_UNITS_QTY AS SOLD_UNITS_QTY,\n  PRODUCT_COST AS PRODUCT_COST,\n  RETAIL_PRICE AS RETAIL_PRICE,\n  MANUFACTURER AS MANUFACTURER,\n  BRAND_NAME AS BRAND_NAME,\n  TITLE AS TITLE,\n  FREIGHT_FEE_AMT AS FREIGHT_FEE_AMT,\n  PACKAGING_FEE_AMT AS PACKAGING_FEE_AMT,\n  DISPENSING_FEE_AMT AS DISPENSING_FEE_AMT,\n  SHIPPED_DT AS SHIPPED_DT,\n  FULFILLMENT_ORIGIN_ZIP_CD AS FULFILLMENT_ORIGIN_ZIP_CD,\n  SHIP_CARRIER_NAME AS SHIP_CARRIER_NAME,\n  TRACKING_NBR AS TRACKING_NBR,\n  ALLIVET_CUSTOMER_NBR AS ALLIVET_CUSTOMER_NBR,\n  PET_NAME AS PET_NAME,\n  PET_TYPE AS PET_TYPE,\n  BREED_TYPE AS BREED_TYPE,\n  PET_GENDER AS PET_GENDER,\n  PET_BIRT_DT AS PET_BIRT_DT,\n  PET_WEIGHT AS PET_WEIGHT,\n  PET_ALLERGY_DESC AS PET_ALLERGY_DESC,\n  PET_MEDICAL_CONDITION AS PET_MEDICAL_CONDITION,\n  PET_PREGNANT_FLAG AS PET_PREGNANT_FLAG,\n  VET_CLINIC_NAME AS VET_CLINIC_NAME,\n  VET_NAME AS VET_NAME,\n  VET_ADDRESS AS VET_ADDRESS,\n  VET_CITY AS VET_CITY,\n  VET_STATE_CD AS VET_STATE_CD,\n  VET_ZIP_CD AS VET_ZIP_CD,\n  VET_PHONE_NBR AS VET_PHONE_NBR,\n  DELETE_FLAG AS DELETE_FLAG,\n  UPDATE_TSTMP AS UPDATE_TSTMP,\n  LOAD_TSTMP AS LOAD_TSTMP\nFROM\n  ALLIVET_INVOICE_DAY_V2_test\"\"\")","df_4.createOrReplaceTempView(\"Shortcut_to_ALLIVET_INVOICE_DAY_4\")"]},"id":"Shortcut_to_ALLIVET_INVOICE_DAY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_ALLIVET_INVOICE_DAY","queries":["df_5 = spark.sql(\"\"\"SELECT\n  DISTINCT INVOICE_POSTING_DT AS INVOICE_POSTING_DT,\n  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  monotonically_increasing_id() AS Monotonically_Increasing_Id\nFROM\n  Shortcut_to_ALLIVET_INVOICE_DAY_4\nWHERE\n  (\n    UPDATE_TSTMP >= current_date\n    OR LOAD_TSTMP >= current_date\n  )\n  AND lower(TXN_TYPE) = 'invoice'\"\"\")","df_5.createOrReplaceTempView(\"SQ_Shortcut_to_ALLIVET_INVOICE_DAY_5\")"]},"id":"SQ_Shortcut_to_ALLIVET_INVOICE_DAY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY","queries":["df_6 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR_V2_test AS ALLIVET_ORDER_NBR,\n  ALLIVET_ORDER_CNTR AS ALLIVET_ORDER_CNTR,\n  ALLIVET_ORDER_LN_NBR_V2_test AS ALLIVET_ORDER_LN_NBR,\n  OPERATION_V2_test AS OPERATION,\n  ALLIVET_CUSTOMER_NBR AS ALLIVET_CUSTOMER_NBR,\n  EXTRA_INFO AS EXTRA_INFO,\n  ORDER_CHG_DT AS ORDER_CHG_DT,\n  FROM_ITEM_CD AS FROM_ITEM_CD,\n  TO_ITEM_CD AS TO_ITEM_CD,\n  PRESCRIPTION_ID_V2_test AS PRESCRIPTION_ID,\n  UPDATE_TSTMP AS UPDATE_TSTMP,\n  LOAD_TSTMP AS LOAD_TSTMP\nFROM\n  ALLIVET_SYSTEM_AUDIT_DAY_V2_test\"\"\")","df_6.createOrReplaceTempView(\"Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY_6\")"]},"id":"Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY","queries":["df_7 = spark.sql(\"\"\"SELECT\n  DISTINCT ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  OPERATION AS OPERATION,\n  ORDER_CHG_DT AS ORDER_CHG_DT,\n  monotonically_increasing_id() AS Monotonically_Increasing_Id\nFROM\n  Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY_6\nWHERE\n  (\n    UPDATE_TSTMP >= current_date\n    OR LOAD_TSTMP >= current_date\n  )\"\"\")","df_7.createOrReplaceTempView(\"SQ_Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY_7\")"]},"id":"SQ_Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Joiner","label":"JNRTRANS","queries":["df_8 = spark.sql(\"\"\"SELECT\n  DETAIL.ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  DETAIL.OPERATION AS OPERATION,\n  DETAIL.ORDER_CHG_DT AS ORDER_CHG_DT,\n  MASTER.ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR1,\n  MASTER.ALLIVET_ORDER_DT AS ALLIVET_ORDER_DT,\n  nvl(\n    MASTER.Monotonically_Increasing_Id,\n    DETAIL.Monotonically_Increasing_Id\n  ) AS Monotonically_Increasing_Id\nFROM\n  SQ_Shortcut_to_ALLIVET_ORDER_DAY_3 MASTER\n  FULL OUTER JOIN SQ_Shortcut_to_ALLIVET_SYSTEM_AUDIT_DAY_7 DETAIL ON MASTER.ALLIVET_ORDER_NBR = DETAIL.ALLIVET_ORDER_NBR\"\"\")","df_8.createOrReplaceTempView(\"JNRTRANS_8\")"]},"id":"JNRTRANS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXPTRANS1","queries":["df_9 = spark.sql(\"\"\"SELECT\n  OPERATION AS OPERATION,\n  ORDER_CHG_DT AS ORDER_CHG_DT,\n  ALLIVET_ORDER_DT AS ALLIVET_ORDER_DT,\n  IFF(\n    ISNULL(ALLIVET_ORDER_NBR),\n    ALLIVET_ORDER_NBR1,\n    ALLIVET_ORDER_NBR\n  ) AS ALLIVET_ORDER_NBR_New,\n  Monotonically_Increasing_Id AS Monotonically_Increasing_Id\nFROM\n  JNRTRANS_8\"\"\")","df_9.createOrReplaceTempView(\"EXPTRANS1_9\")"]},"id":"EXPTRANS1","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Joiner","label":"JNRTRANS1","queries":["df_10 = spark.sql(\"\"\"SELECT\n  DETAIL.ALLIVET_ORDER_NBR_New AS ALLIVET_ORDER_NBR_New,\n  DETAIL.OPERATION AS OPERATION,\n  DETAIL.ORDER_CHG_DT AS ORDER_CHG_DT,\n  DETAIL.ALLIVET_ORDER_DT AS ALLIVET_ORDER_DT,\n  MASTER.INVOICE_POSTING_DT AS INVOICE_POSTING_DT,\n  MASTER.ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  nvl(\n    MASTER.Monotonically_Increasing_Id,\n    DETAIL.Monotonically_Increasing_Id\n  ) AS Monotonically_Increasing_Id\nFROM\n  SQ_Shortcut_to_ALLIVET_INVOICE_DAY_5 MASTER\n  FULL OUTER JOIN EXPTRANS1_9 DETAIL ON MASTER.ALLIVET_ORDER_NBR = DETAIL.ALLIVET_ORDER_NBR_New\"\"\")","df_10.createOrReplaceTempView(\"JNRTRANS1_10\")"]},"id":"JNRTRANS1","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"Exp_Dates","queries":["df_11 = spark.sql(\"\"\"SELECT\n  IFF(\n    ISNULL(ALLIVET_ORDER_NBR_New),\n    ALLIVET_ORDER_NBR_New,\n    ALLIVET_ORDER_NBR_New\n  ) AS ALLIVET_ORDER_NBR_New,\n  ORDER_CHG_DT AS ORDER_CHG_DT,\n  ALLIVET_ORDER_DT AS ALLIVET_ORDER_DT,\n  IFF(\n    (\n      INSTR(\n        LTRIM(RTRIM(UPPER(OPERATION))),\n        UPPER('ReSentToRPH')\n      ) > 0\n      OR INSTR(LTRIM(RTRIM(UPPER(OPERATION))), UPPER('ReHold')) > 0\n      OR LTRIM(RTRIM(OPERATION)) = ''\n    ),\n    ORDER_CHG_DT,\n    NULL\n  ) AS RX_HOLD_DT,\n  IFF(\n    (\n      INSTR(\n        LTRIM(RTRIM(UPPER(OPERATION))),\n        UPPER('PrintRxAndShippingLabel')\n      ) > 0\n      OR INSTR(\n        LTRIM(RTRIM(UPPER(OPERATION))),\n        UPPER('VoidInvoice')\n      ) > 0\n    ),\n    ORDER_CHG_DT,\n    NULL\n  ) AS OPEN_DT,\n  INVOICE_POSTING_DT AS COMPLETE_DT,\n  IFF(\n    (\n      INSTR(LTRIM(RTRIM(UPPER(OPERATION))), UPPER('VoidSO')) > 0\n    ),\n    ORDER_CHG_DT,\n    NULL\n  ) AS VOID_DT,\n  Monotonically_Increasing_Id AS Monotonically_Increasing_Id\nFROM\n  JNRTRANS1_10\"\"\")","df_11.createOrReplaceTempView(\"Exp_Dates_11\")"]},"id":"Exp_Dates","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Sorter","label":"Srt_CHG_DT","queries":["df_12 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR_New AS ALLIVET_ORDER_NBR,\n  ORDER_CHG_DT AS ORDER_CHG_DT,\n  RX_HOLD_DT AS RX_HOLD_DT,\n  OPEN_DT AS OPEN_DT,\n  COMPLETE_DT AS COMPLETE_DT,\n  VOID_DT AS VOID_DT,\n  ALLIVET_ORDER_DT AS ALLIVET_ORDER_DT,\n  Monotonically_Increasing_Id AS Monotonically_Increasing_Id\nFROM\n  Exp_Dates_11\nORDER BY\n  ALLIVET_ORDER_NBR ASC,\n  ORDER_CHG_DT ASC\"\"\")","df_12.createOrReplaceTempView(\"Srt_CHG_DT_12\")"]},"id":"Srt_CHG_DT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Aggregator","label":"Agg_Order_OrderLN","queries":["df_13 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  MAX(RX_HOLD_DT) AS o_RX_HOLD_DT,\n  MAX(OPEN_DT) AS o_OPEN_DT,\n  MAX(COMPLETE_DT) AS o_COMPLETE_DT,\n  MAX(VOID_DT) AS o_VOID_DT,\n  MIN(ORDER_CHG_DT) AS o_ORDER_CHG_DT,\n  min(ALLIVET_ORDER_DT) AS o_ALLIVET_ORDER_DT,\n  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id\nFROM\n  Srt_CHG_DT_12\nGROUP BY\n  ALLIVET_ORDER_NBR\"\"\")","df_13.createOrReplaceTempView(\"Agg_Order_OrderLN_13\")"]},"id":"Agg_Order_OrderLN","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Joiner","label":"Jnr_Order_Status","queries":["df_14 = spark.sql(\"\"\"SELECT\n  DETAIL.ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  DETAIL.o_RX_HOLD_DT AS o_RX_HOLD_DT,\n  DETAIL.o_OPEN_DT AS o_OPEN_DT,\n  DETAIL.o_COMPLETE_DT AS o_COMPLETE_DT,\n  DETAIL.o_VOID_DT AS o_VOID_DT,\n  DETAIL.o_ORDER_CHG_DT AS o_ORDER_CHG_DT,\n  DETAIL.o_ALLIVET_ORDER_DT AS o_ALLIVET_ORDER_DT,\n  MASTER.ALLIVET_ORDER_NBR AS LKP_ALLIVET_ORDER_NBR,\n  MASTER.RX_HOLD_DT AS LKP_RX_HOLD_DT,\n  MASTER.OPEN_DT AS LKP_OPEN_DT,\n  MASTER.COMPLETE_DT AS LKP_COMPLETE_DT,\n  MASTER.VOID_DT AS LKP_VOID_DT,\n  MASTER.LOAD_TSTMP AS Lkp_LOAD_TSTMP,\n  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id\nFROM\n  SQ_Shortcut_to_ALLIVET_ORDER_STATUS_DAY_1 MASTER\n  RIGHT JOIN Agg_Order_OrderLN_13 DETAIL ON MASTER.ALLIVET_ORDER_NBR = DETAIL.ALLIVET_ORDER_NBR\"\"\")","df_14.createOrReplaceTempView(\"Jnr_Order_Status_14\")"]},"id":"Jnr_Order_Status","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"Exp_Update_Flag","queries":["df_15 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  o_ORDER_CHG_DT AS o_ORDER_CHG_DT,\n  o_ALLIVET_ORDER_DT AS o_ALLIVET_ORDER_DT,\n  IFF(\n    ISNULL (\n      IFF(\n        (\n          ISNULL(o_RX_HOLD_DT)\n          and Not isnull(o_ALLIVET_ORDER_DT)\n        ),\n        o_ALLIVET_ORDER_DT,\n        o_RX_HOLD_DT\n      )\n    ),\n    LKP_RX_HOLD_DT,\n    IFF(\n      (\n        ISNULL(o_RX_HOLD_DT)\n        and Not isnull(o_ALLIVET_ORDER_DT)\n      ),\n      o_ALLIVET_ORDER_DT,\n      o_RX_HOLD_DT\n    )\n  ) AS o_RX_HOLD_DT,\n  IFF(ISNULL(o_OPEN_DT), LKP_OPEN_DT, o_OPEN_DT) AS o_OPEN_DT,\n  IFF(\n    ISNULL(o_COMPLETE_DT),\n    LKP_COMPLETE_DT,\n    o_COMPLETE_DT\n  ) AS o_COMPLETE_DT,\n  IFF(ISNULL(o_VOID_DT), LKP_VOID_DT, o_VOID_DT) AS o_VOID_DT,\n  IFF(ISNULL(Lkp_LOAD_TSTMP), now(), Lkp_LOAD_TSTMP) AS LOAD_TSTMP,\n  now() AS UPDATE_TSTMP,\n  IFF(\n    (ISNULL(LKP_ALLIVET_ORDER_NBR)),\n    1,\n    IFF (\n      NOT (ISNULL(LKP_ALLIVET_ORDER_NBR))\n      AND (\n        (\n          IFF (\n            ISNULL (\n              IFF(\n                ISNULL (\n                  IFF(\n                    (\n                      ISNULL(o_RX_HOLD_DT)\n                      and Not isnull(o_ALLIVET_ORDER_DT)\n                    ),\n                    o_ALLIVET_ORDER_DT,\n                    o_RX_HOLD_DT\n                  )\n                ),\n                LKP_RX_HOLD_DT,\n                IFF(\n                  (\n                    ISNULL(o_RX_HOLD_DT)\n                    and Not isnull(o_ALLIVET_ORDER_DT)\n                  ),\n                  o_ALLIVET_ORDER_DT,\n                  o_RX_HOLD_DT\n                )\n              )\n            ),\n            TO_DATE('9999-12-31', 'YYYY-MM-DD'),\n            IFF(\n              (\n                ISNULL(o_RX_HOLD_DT)\n                and Not isnull(o_ALLIVET_ORDER_DT)\n              ),\n              o_ALLIVET_ORDER_DT,\n              o_RX_HOLD_DT\n            )\n          ) <> IFF(\n            ISNULL(LKP_RX_HOLD_DT),\n            TO_DATE('9999-12-31', 'YYYY-MM-DD'),\n            LKP_RX_HOLD_DT\n          )\n        )\n        OR IFF(\n          ISNULL(o_OPEN_DT),\n          TO_DATE('9999-12-31', 'YYYY-MM-DD'),\n          o_OPEN_DT\n        ) <> IFF(\n          ISNULL(LKP_OPEN_DT),\n          TO_DATE('9999-12-31', 'YYYY-MM-DD'),\n          LKP_OPEN_DT\n        )\n        OR IFF(\n          ISNULL(o_VOID_DT),\n          TO_DATE('9999-12-31', 'YYYY-MM-DD'),\n          o_VOID_DT\n        ) <> IFF(\n          ISNULL(LKP_VOID_DT),\n          TO_DATE('9999-12-31', 'YYYY-MM-DD'),\n          LKP_VOID_DT\n        )\n        OR IFF(\n          ISNULL(o_COMPLETE_DT),\n          TO_DATE('9999-12-31', 'YYYY-MM-DD'),\n          o_COMPLETE_DT\n        ) <> IFF(\n          ISNULL(LKP_COMPLETE_DT),\n          TO_DATE('9999-12-31', 'YYYY-MM-DD'),\n          LKP_COMPLETE_DT\n        )\n      ),\n      2,\n      0\n    )\n  ) AS UPDATE_FLAG,\n  Monotonically_Increasing_Id AS Monotonically_Increasing_Id\nFROM\n  Jnr_Order_Status_14\"\"\")","df_15.createOrReplaceTempView(\"Exp_Update_Flag_15\")"]},"id":"Exp_Update_Flag","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Filter","label":"Ftr_Insert_Update","queries":["df_16 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  o_RX_HOLD_DT AS o_RX_HOLD_DT,\n  o_OPEN_DT AS o_OPEN_DT,\n  o_COMPLETE_DT AS o_COMPLETE_DT,\n  o_VOID_DT AS o_VOID_DT,\n  LOAD_TSTMP AS LOAD_TSTMP,\n  UPDATE_TSTMP AS UPDATE_TSTMP,\n  UPDATE_FLAG AS UPDATE_FLAG,\n  o_ORDER_CHG_DT AS o_ORDER_CHG_DT,\n  o_ALLIVET_ORDER_DT AS o_ALLIVET_ORDER_DT,\n  Monotonically_Increasing_Id AS Monotonically_Increasing_Id\nFROM\n  Exp_Update_Flag_15\nWHERE\n  IN(UPDATE_FLAG, 1, 2)\"\"\")","df_16.createOrReplaceTempView(\"Ftr_Insert_Update_16\")"]},"id":"Ftr_Insert_Update","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXPTRANS","queries":["df_17 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  o_OPEN_DT AS o_OPEN_DT,\n  o_COMPLETE_DT AS o_COMPLETE_DT,\n  o_VOID_DT AS o_VOID_DT,\n  LOAD_TSTMP AS LOAD_TSTMP,\n  UPDATE_TSTMP AS UPDATE_TSTMP,\n  UPDATE_FLAG AS UPDATE_FLAG,\n  o_ALLIVET_ORDER_DT AS o_ALLIVET_ORDER_DT,\n  IFF(UPDATE_FLAG = 1, o_ALLIVET_ORDER_DT, o_RX_HOLD_DT) AS o_RX_HOLD_DT1,\n  Monotonically_Increasing_Id AS Monotonically_Increasing_Id\nFROM\n  Ftr_Insert_Update_16\"\"\")","df_17.createOrReplaceTempView(\"EXPTRANS_17\")"]},"id":"EXPTRANS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Update Strategy","label":"UPDTRANS","queries":["df_18 = spark.sql(\"\"\"SELECT\n  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,\n  o_RX_HOLD_DT1 AS o_RX_HOLD_DT,\n  o_OPEN_DT AS o_OPEN_DT,\n  o_COMPLETE_DT AS o_COMPLETE_DT,\n  o_VOID_DT AS o_VOID_DT,\n  LOAD_TSTMP AS LOAD_TSTMP,\n  UPDATE_TSTMP AS UPDATE_TSTMP,\n  UPDATE_FLAG AS UPDATE_FLAG,\n  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,\n  DECODE(UPDATE_FLAG, 1, 'DD_INSERT', 2, 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG\nFROM\n  EXPTRANS_17\"\"\")","df_18.createOrReplaceTempView(\"UPDTRANS_18\")"]},"id":"UPDTRANS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"Shortcut_to_ALLIVET_ORDER_STATUS_DAY","queries":["spark.sql(\"\"\"MERGE INTO ALLIVET_ORDER_STATUS_DAY_V2_test AS TARGET\nUSING\n  UPDTRANS_18 AS SOURCE ON TARGET.ALLIVET_ORDER_NBR_V2_test = SOURCE.ALLIVET_ORDER_NBR\n  WHEN MATCHED\n  AND SOURCE.UPDATE_STRATEGY_FLAG = \"DD_UPDATE\" THEN\nUPDATE\nSET\n  TARGET.ALLIVET_ORDER_NBR_V2_test = SOURCE.ALLIVET_ORDER_NBR,\n  TARGET.RX_HOLD_DT_V2_test = SOURCE.o_RX_HOLD_DT,\n  TARGET.OPEN_DT_V2_test = SOURCE.o_OPEN_DT,\n  TARGET.COMPLETE_DT = SOURCE.o_COMPLETE_DT,\n  TARGET.VOID_DT_V2_test = SOURCE.o_VOID_DT,\n  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP,\n  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP\n  WHEN MATCHED\n  AND SOURCE.UPDATE_STRATEGY_FLAG = \"DD_DELETE\"\n  AND TARGET.RX_HOLD_DT_V2_test = SOURCE.o_RX_HOLD_DT\n  AND TARGET.OPEN_DT_V2_test = SOURCE.o_OPEN_DT\n  AND TARGET.COMPLETE_DT = SOURCE.o_COMPLETE_DT\n  AND TARGET.VOID_DT_V2_test = SOURCE.o_VOID_DT\n  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP\n  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP THEN DELETE\n  WHEN NOT MATCHED\n  AND SOURCE.UPDATE_STRATEGY_FLAG = \"DD_INSERT\" THEN\nINSERT\n  (\n    TARGET.ALLIVET_ORDER_NBR_V2_test,\n    TARGET.RX_HOLD_DT_V2_test,\n    TARGET.OPEN_DT_V2_test,\n    TARGET.COMPLETE_DT,\n    TARGET.VOID_DT_V2_test,\n    TARGET.UPDATE_TSTMP,\n    TARGET.LOAD_TSTMP\n  )\nVALUES\n  (\n    SOURCE.ALLIVET_ORDER_NBR,\n    SOURCE.o_RX_HOLD_DT,\n    SOURCE.o_OPEN_DT,\n    SOURCE.o_COMPLETE_DT,\n    SOURCE.o_VOID_DT,\n    SOURCE.UPDATE_TSTMP,\n    SOURCE.LOAD_TSTMP\n  )\"\"\")"]},"id":"Shortcut_to_ALLIVET_ORDER_STATUS_DAY","position":{"x":0,"y":0},"type":"normalNode"}]}